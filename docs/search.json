[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción a Web Scraping para el análisis estadístico con R",
    "section": "",
    "text": "Ilustración: https://posit.co/blog/rvest-easy-web-scraping-with-r/\n\n\n\n\n\nObjetivos Generales\n\nCapacitar en el uso básico de R para la extracción de datos de la web para el análisis estadístico.\nIntroducir los conceptos y herramientas fundamentales del web scraping, comentando aspectos éticos y legales.\nProveer herramientas necesarias para trabajar con páginas estáticas utilizando R.",
    "crumbs": [
      "Objetivos Generales"
    ]
  },
  {
    "objectID": "01_intro.html",
    "href": "01_intro.html",
    "title": "1  Introducción al manejo de R",
    "section": "",
    "text": "1.1 Primeros pasos\nEnlaces",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#primeros-pasos",
    "href": "01_intro.html#primeros-pasos",
    "title": "1  Introducción al manejo de R",
    "section": "",
    "text": "La instalación del lenguaje R puede realizarse desde la Red Integral de Archivos de R (CRAN). En esta interface se debe seleccionar el sistema operativo que corresponda, por ejemplo WINDOWS. En la siguiente interface, seleccionar base (o bien “install R for the first time”) y, finalmente, en la siguiente pantalla, seleccionar Download R-4.4.2 for Windows (o la versión que se desee). Se descargará un archivo ejecutable con el instalador del lenguaje, el cual deberemos correr aceptando todas las instancias.\n\n\n\n\n\n\n\n\n\n\nRStudio es un entorno de desarrollo integrado (IDE, por sus siglas en inglés) para el lenguaje de programación R, que ofrece una interfaz gráfica de usuario (GUI) amigable y diversas herramientas para facilitar el desarrollo, depuración y visualización de código. Entre sus características se incluyen la edición de código con resaltado de sintaxis, la ejecución de código línea por línea o por bloques, la gestión de paquetes, la creación de gráficos y la integración con otros programas y herramientas para el análisis de datos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudioCloud: Actualmente administrada por la compañía Posit, permite trabajar con Rstudio en la nube. Es necesario crear un cuenta (“Sign up”) cuando se accede por primera vez, o bien ingresar los datos de acceso (“log in”) en caso de que ya se posea una cuenta. La versión gratuita permite actualmente trabajar hasta con 50 proyectos y 25 horas de trabajo mensuales.\n\n\n\nCRAN(“click”). Descarga del lenguaje R.\nRstudio(“click”). Descarga del IDE RStudio.\nRstudio Cloud(“click”).\n\n\n\n\n\n\n\nCompatibilidad\n\n\n\nR 4.1 es la última versión compatible con versiones de 32 bits. Windows Vista ya no es compatible.\nR 4.2.0 y versiones posteriores requieren Universal C Runtime (UCRT), que se incluye en Windows 10 y Windows Server 2016 o posterior. En versiones anteriores de Windows, UCRT debe instalarse antes de instalar R. UCRT está disponible para Windows desde Windows Vista SP2 y Windows Server 2008 SP2.\n\n\n\n\n\n\n\n\nImportante\n\n\n\nAntes de instalar RStudio, tienes que haber instalado R.\n\n\n\n1.1.1 Otros IDE\n\nNavure (“click”)\nInfoStat (“click”)\nJupyter (“click”)\nJASP (“click”)\nJAMOVI (“click”)\nStatET (“click”)\nESS (“click”)\nR Analytic flow (“click”)\nRattle (“click”)\n\n\n\n\n\n\n\nTip\n\n\n\n¡¡¡ R PUEDE SER EJECUTADO SIN NECESIDAD DE UN IDE!!!\nPor ejemplo, en la barra de búsqueda de Windows, seleccionar Editar las variables de entorno de esta cuenta. Aparecerá la ventana Variables de entorno. En el bloque Variables de usuario para usuario, seleccionar Path y luego presionar Editar…. Aparecerá la ventana Editar las variables de entorno. Presionar la opción Nuevo e ingresar C:\\Program Files\\R\\R-4.4.2\\bin (o la versión que se desee). Finalmente, Aceptar.\nDesde ahora podremos correr código R desde la ventana de comandos Símbolo del sistema, a la cual se accede ingresando el comando CMD en la barra de búsqueda de Windows. Basta ejecutar el comando r para comenzar a correr código de R, y q() para salir.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#objetos",
    "href": "01_intro.html#objetos",
    "title": "1  Introducción al manejo de R",
    "section": "1.2 Objetos",
    "text": "1.2 Objetos\n“Todo en R es un objeto”\nSe conoce como objeto a toda entidad creada y manipulada en R. Datos, tablas, gráficos, funciones, vectores, matrices, son algunos tipos de objetos en R.\nLos objetos en R se caracterizan porque pueden presentar distintos atributos, por ejemplo, un nombre. Esto quiere decir que al momento de almacenar un objeto es posible asignarle un nombre.\n\n\n\n\n\n\nNota\n\n\n\nAl momento de nombrar un objeto en R, es importante utilizar nombres claros y cortos que permitan manipular con sencillez el objeto. También se sugiere utilizar nombres que permitan recordar fácilmente el contenido de los objetos.\nLos nombres pueden incluir letras, números (siempre y cuando estén precedidos por una letra), guión bajo y puntos (antes o después de las letras). No se pueden utilizar símbolos especiales (“*”, “:”, “-”, “~”,“$”, entre otros) ni palabras reservadas (NA, for, while, TRUE, FALSE, Inf, NaN, NULL) en la denominación de un objeto.\nR distingue mayúsculas y minúsculas, por lo que las variables a y A serán consideradas como objetos diferentes.\n\n\nPodemos almacenar los datos en variables por medio del operador “=” o bien por medio de los operadores de asignación “&lt;-” o “-&gt;”. También podemos asignar valores utilizando la función assign().\nLa función class() nos devuelve el atributo tipo de dato.\n\na = 1\na\nclass(a)\n\na &lt;- 1\na\nclass(a)\n\n1 -&gt; a\na\nclass(a)\n\nassign(\"a\", 1)\na\nclass(a)\n\n\n\n\n\n\n\nNota\n\n\n\nNotar que las asignaciones se realizaron de derecha a izquierda en los dos primeros casos, y de izquierda a derecha en el tercero. La práctica más extendida es realizar la asignación de derecha a izquierda.\n\n\nEjemplos de atributos\n\nClass\nDim: dimensión (matrices, dataframes, arreglos)\nNames: nombre de los componentes de un objeto\nLength: longitud de un vector.\nNcol, Nrow: número de columnas/filas (en matrices, dataframes, etc.)\nFrecuency: frecuencia en una serie de tiempo\nEtc.\n\n\n\n\n\n\n\nTipos de datos\n\n\n\nEn R, los tipos de datos principales se pueden agrupar en tipos atómicos, que son las unidades mínimas de información, y las estructuras de datos. Los principales tipos de datos atómicos son:\n\nnumeric: son datos numéricos. Un caso especial de datos numéricos es el tipo integer (entero).\ncharacter: son datos de tipo texto\nlogical: son datos lógicos, que pueden adoptar uno de dos valores: TRUE o FALSE.\ncomplex: Números complejos, por ejemplo a = 2 + 3i.\n\nTambién puede mencionarse el tipo de dato raw, usado para almacenar secuencias de bytes útiles para trabajar con datos binarios, pero su empleo se realiza en contextos muy específicos, por lo que usualmente no trabajaremos con ellos.\nAdemás, según la estructura de los datos, los objetos pueden ser:\n\nVectores: son series de objetos del mismo tipo atómico.\nMatrices: son arreglos en filas y columnas de objetos del mismo tipo atómico.\nArreglos (“arrays”): extienden las matrices a más dimensiones.\nTablas(data.frames o tibbles): son arreglos en filas y columnas de objetos que pueden pertenecer a diferentes tipos atómicos.\nListas: son series de objetos que pueden presentar diferentes estructuras.\nFactores: son series de objetos indexados o que presentan un ordenamiento jerárquico. Para indicar el índice de un objeto, se emplea [[]] en lugar de [].\n\n\n\n\n1.2.0.1 Ejemplos de clases de datos\n\n\nx = 5\nclass(x)\nmode(x)\n\nx = 5L\nclass(x)\n\nz = seq(0, 10, 2) # Secuencia: 'desde', 'hasta', 'cada'\nclass(z)\n\nz = as.integer(z)\nclass(z)\n\nsexo = c(\"masculino\", \"femenino\")\nclass(sexo)\n\nnotas = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")\nclass(notas)\nmean(notas)\nnotas = as.numeric(notas)\nclass(notas)\nmean(notas)\n\ncondicion = (z &gt; x)\ncondicion\nclass(condicion)\n\ncomplejo = 2 + 3i\ncomplejo\nclass(complejo)\n\ncalificacion = factor(levels = c(\"insuficiente\",\"regular\",\"sobresaliente\"))\ncalificacion\nclass(calificacion)\n\nfactor.sexo = as.factor(sexo)\nfactor.sexo\nclass(factor.sexo)\n\nmatrizNotas = matrix(notas, nrow = 5, ncol = 2)\nmatrizNotas\nclass(matrizNotas)\n\nserie = seq(12)\nserie\nmiArreglo = array(serie, dim = c(2,2,2)) # Las dimensiones hacen referencia al número de filas, número de columnas y número de capas, en ese orden\nmiArreglo\n\nmiLista = list(sexo, notas, calificacion)\nmiLista\n\nmiLista1 = miLista[[1]]\nmiLista1\nclass(miLista1)\n\ntabla = data.frame(\n  Alumno = c(\"Juan\", \"Ana\", \"María\"), # Columna 1\n  Notas = c(5, 8, 10) # Columna 2\n)\ntabla\n\n\n\n\n\n\n\nComentarios (#)\n\n\n\nEn R, toda línea precedida por el símbolo # (numeral) no es ejecutada. Su empleo es muy útil para realizar comentarios o descripciones dentro del código.\n\n\nLos tipos de estructuras más utilizados en el análisis de datos estadísticos son los vectores, matrices, tablas y factores.\nPodemos ver que es posible modificar la tipología de un dato por otra, de ser necesario. Algunas funciones utilizadas son:\n\nas.numeric(); as.integer()\nas.character()\nas.factor()\nas.logical()\nas.data.frame()\nas.array()\n\n\n\n1.2.0.2 Borrado de objetos\nPara borrar objetos almacenados, se utiliza la función rm().\n\n\n# Borrado de un objeto\n\nrm(a)\na\n# Error: objeto 'a' no encontrado\n\n# Borrado de todos los objetos en el entorno\n\nrm(list = ls())\n\n\n\n\n\n\n\nTip\n\n\n\nAntes de comenzar cualquier análisis estadístico, se sugiere borrar todos los objetos que pudieran estar almacenados en el entorno.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#funciones",
    "href": "01_intro.html#funciones",
    "title": "1  Introducción al manejo de R",
    "section": "1.3 Funciones",
    "text": "1.3 Funciones\nTodo lo que ocurre en R es el resultado de una función\nUna función en R es un bloque de código que realiza una tarea específica. Se la invoca por medio de un nombre seguido de paréntesis que pueden contener argumentos si son necesarios. Por ejemplo:\n\n\na = 30\n\nb = 20\n\nsort(c(a, b))\n\nsum(a, b) # equivalente a 'a + b'\n\nR tiene muchas funciones integradas para realizar diversas operaciones, como cálculos matemáticos, manipulación de datos, gráficos, etc. Ejemplos incluyen sum(), mean(), length(), plot(), sort(), entre otros. Aún así, es posible crear funciones propias, lo cual se trabajará más adelante en la cursada.\n\n\n1.3.1 Paquetes\nEn R, todas las funciones y sets de datos están almacenados en paquetes. Sólo cuando se cargue un paquete su contenido estará disponible. Ésto se realiza por una cuestión de eficiencia en el uso de los recursos computacionales, y también por seguridad.\nAlgunos paquetes o librerías forman parte del código fuente de R, y son conocidos como librerías de base, disponibles con la instalación de R. El resto de las librerías deben ser instaladas desde el CRAN, mediante el comando install.packages(“nombre del paquete”). En este último caso, para poder utilizar las funciones de estas librerías, se debe correr el comando library(“nombre del paquete”).\n\n\n\n\n\n\nNota\n\n\n\nTambién es posible instalar paquetes desde un archivo previamente descargado desde el CRAN. Para ello se puede correr el comando:\ninstall.packages(file.choose(), repos = NULL, type=“source”)\n\n\nPor ejemplo, para importar archivos de datos con distintas extensiones, se puede utilizar la función import() de la librería {rio}.\n\ninstall.packages(\"rio\") # instalación de la librería (solo una vez)\nlibrary(\"rio\") # invocación de la librería (cada vez que deseemos utilizar alguna de sus funciones)\nimport(file.choose()) # función import para leer archivos de datos y file.choose() para seleccionar archivos almacenados\n\nAlgunas de las librerías más utilizadas en R están “empaquetadas” en la librería Tidyverse.\n\n\n1.3.2 Concatenación de funciones: el operador “|&gt;” (pipe)\nCon frecuencia es necesario “anidar” funciones en R, por ejemplo:\n\n\nnumeros = seq(20)\nnumeros\nround(sqrt(mean(numeros)), digits = 2)\n\nEn la función anterior, la función mean() está anidada dentro de la función sqrt(), que a su vez está anidada dentro de la función round(). En estos casos, se dificulta llevar un control de las operaciones realizadas, por lo que se suele recurrir al operador |&gt; (“pipe”), que permite concatenar funciones:\n\n\nnumeros = seq(20)\nnumeros |&gt; mean() |&gt; sqrt() |&gt; round(digits = 2)\n\no bien:\n\n\nnumeros |&gt; \n  mean() |&gt; \n  sqrt() |&gt; \n  round(digits = 2)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#estructuras-de-datos",
    "href": "01_intro.html#estructuras-de-datos",
    "title": "1  Introducción al manejo de R",
    "section": "1.4 Estructuras de datos",
    "text": "1.4 Estructuras de datos\n\n1.4.1 El vector\nEn R, un vector es una serie o conjunto de elementos del mismo tipo. Un vector puede definirse por medio del operador c(), y ser asignado a una variable por medio del operador = ó &lt;-. Por ejemplo:\n\ndecimales = c(1,2,3.5,7.8,9); decimales; class(decimales)\nenteros = c(1L, 2L, 3L, 7L, 9L); enteros; class(enteros)\n# o bien\nenteros = as.integer(decimales); enteros; class(enteros)\nlogicos = c(TRUE,FALSE,FALSE,TRUE); logicos; class(logicos)\n\n\n\n\n\n\n\nNota\n\n\n\nNotar el empleo de “;” para concatenar diferentes comandos\n\n\nEn R, los vectores constituyen las estructuras de menor nivel. Es decir, en R, no existen las magnitudes escalares, las cuales son consideradas como vectores de tamaño 1.\nCuando en un vector hay elementos de distinto tipo, R automáticamente “coerciona” elementos de un tipo y los asigna a otro tipo en el siguiente orden: character, numeric, integer.\n\n\ncaracteres = c(1,2,\"a\",\"b\",3); caracteres; class(caracteres)\nsort(caracteres) #ordenamiento de caracteres\n\nnumeros = c(1.5, 2.5, 3L, 5L, 7.5); sort(numeros);class(numeros)\n\nOperaciones aritméticas, relaciones e indexación\n\n\n# Operaciones aritméticas\n\nnumeros = c(1:10)\n\nsum(numeros)\n\nmean(numeros)\n\na = 4\n\nnumeros + a\n\nnumeros - a\n\nnumeros * a\n\nnumeros / a\n\nnumeros %/% a\n\nnumeros %% a\n\nnumeros2 = c(11:20)\n\nnumeros + numeros2\n\nb = c(3,4)\n\nnumeros + b # ojo!\n\na^2\n\na**2\n\n# Relaciones (se aplica a condiciones)\n\n1 &lt; a\n\n5 &lt; a\n\nb &gt; a\n\nb &gt;= a\n\nb == a\n\nb != a\n\na %in% b\n\na %in% numeros\n\n# Indexación\n\nn2 = numeros[2]; n2\n\nmean(numeros[2:10])\n\nmean(numeros[2:length(numeros)])\n\nmean(numeros[-1])\n\nnumeros[numeros &gt;= 5]\n\nmean(numeros[numeros &lt; 8])\n\n\n\n1.4.2 Matrices\nUna matriz es un arreglo bidimensional de datos del mismo tipo. De hecho, un vector puede ser visto como un caso especial de una matriz en la cual hay solo una fila (o solo una columna). En el caso de las matrices, es posible consultar el atributo dim():\n\n\nserie = c(1:16); serie\nmatriz = matrix(serie,ncol = 4); matriz\nmatriz = matrix(serie,ncol = 4,byrow = TRUE); matriz\ndim(matriz)\n\n# indexación\n\nmatriz = matrix(serie,ncol = 4)\nmatriz[,2] # columna 2\nmatriz[2,] # fila 2\nmatriz[2,2] # columna 2 fila 2\n\n# operaciones sobre filas y columnas\n\ncolSums(matriz)\n\ncolMeans(matriz)\n\nrowSums(matriz)\n\nrowMeans(matriz)\n\napply(matriz,1,sum) # suma marginal de filas\n\napply(matriz,2,sum) # suma marginal de columnas\n\n\n\n1.4.3 Uniones\nSon funciones que permiten combinar objetos como vectores, matrices y tablas.\n\n1.4.3.1 Unión “cbind” (unión de “columnas”)\n\n\nmatriz.union.col = cbind(decimales,enteros); matriz.union.col\nclass(matriz.union.col)\ndim(matriz.union.col)\n\n\n\n1.4.3.2 Unión “rbind” (unión de “filas”)\n\n\nmatriz.union.fila = rbind(decimales,enteros); matriz.union.fila\nclass(matriz.union.fila)\ndim(matriz.union.fila)\n\n\n\n\n1.4.4 Data frames\nA diferencia de una matriz, un dataframe puede ser visto como una colección de vectores de distinto tipo. Por ejemplo:\n\nletras = letters[1:10]\nnumeros = c(1:10)\ndf = cbind(letras,numeros)\ndf\nclass(df)\n\nEntonces:\n\nletras = letters[1:10]\nnumeros = c(1:10)\ndf = data.frame(letras=letras,numeros=numeros)\ndf\nclass(df)\n\n\n\n\n\n\n\nNota\n\n\n\nUna dataframe puede ser visto como una unión de vectores:\n\ncolNumeros = df$numeros\ncolNumeros\nsummary(colNumeros)\n\nNotar el empleo del signo \\(\\$\\), indicando que el vector “numeros” pertenece al objeto “df”.\n\n\nUn objeto tibble es un data frame mejorado:\n\n\nletras = letters[1:10]\nnumeros = c(1:10)\ndf = tibble(letras=letras,numeros=numeros)\ndf\nclass(df)\n\n\n\n1.4.5 Otras estructuras\nComo se mencionó, además de los vectores, matrices y data frames, otros tipos de estructura de datos son los arreglos o “arrays” y las listas, pero difícilmente las utilicemos en durante la cursada.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#importación-de-datos",
    "href": "01_intro.html#importación-de-datos",
    "title": "1  Introducción al manejo de R",
    "section": "1.5 Importación de datos",
    "text": "1.5 Importación de datos\n\n1.5.1 Archivos .xlsx\n\n\nlibrary(readxl)\n\ndatos = file.choose() |&gt;\n  read_excel()\n\nView(datos)\n\nrm(datos)\n\n\n\n1.5.2 Archivos .csv\n\n\ndatos = read.csv(file.choose(), header = TRUE, dec = \",\")\n\n# O bien\n\ndatos = file.choose() |&gt;\n  read.csv(header = TRUE,dec = \",\")\n\nView(datos)\nrm(datos)\n\n\n\n1.5.3 Archivos en general (librería “{rio}”)\n\n\nlibrary(rio)\n\ndatos = file.choose() |&gt;\n  import()\n\nView(datos)\nrm(datos)\n\n\n\n1.5.4 Desde el repositorio de R\nR provee un extenso listado de sets de datos reales para entrenamiento, que puede consultarse por medio de la función data(). En caso de que se desee importar un set de datos en particular, se puede ejecutar la instrucción data(nombre del set de datos), o simplemente, el nombre del set de datos. En nuestro caso:\n\ndatos = PlantGrowth\n\nPara consultar mayores detalles acerca del set de datos, se puede ejecutar:\n\n?PlantGrowth",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#exploración-de-datos",
    "href": "01_intro.html#exploración-de-datos",
    "title": "1  Introducción al manejo de R",
    "section": "1.6 Exploración de datos",
    "text": "1.6 Exploración de datos\n\n\nstr(datos) # estructura\nhead(datos,10) # primeros 10 registros\ntail(datos,10) # últimos 10 registros\nsummary(datos) # resumen",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "01_intro.html#exportación-de-datos",
    "href": "01_intro.html#exportación-de-datos",
    "title": "1  Introducción al manejo de R",
    "section": "1.7 Exportación de datos",
    "text": "1.7 Exportación de datos\nVeremos únicamente cómo exportar un archivo en formato excel con el paquete {rio}:\n\n\ninstall.packages(\"rio\")\n\nlibrary(rio)\n\nruta = choose.dir() # selección destino (carpeta)\n\nnombreArchivo = \"crecimientoPlantas.xlsx\"\n\npg |&gt; # Exportación en formato .xlsx\n  export(\n    file = file.path(ruta, nombreArchivo)\n  )",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al manejo de R</span>"
    ]
  },
  {
    "objectID": "02_tidyverse.html",
    "href": "02_tidyverse.html",
    "title": "2  Manipulación de tablas: tidyverse",
    "section": "",
    "text": "Tidyverse es una colección de paquetes de R diseñados para la ciencia de datos. Todos los paquetes comparten una filosofía de diseño, una gramática y estructuras de datos subyacentes.\n\nReferencia principal: R para la Ciencia de Datos.\nTambién es posible consultar en la página oficial de tidyverse.\n\nPara instalar el paquete completo, se debe ejecutar:\n\ninstall.packages(\"tidyverse\")\n\nEl código anterior debe ejecutarse solo una vez. La instalación completa del paquete incluye, entre otras, las siguientes librerías:\n\nreadr: Importa datos de archivos (como CSV o TXT) de manera rápida y eficiente.\ndplyr: Manipula y transforma datos con funciones intuitivas como filter, select, y mutate.\nggplot2: Crea visualizaciones de datos personalizadas y elegantes usando una gramática gráfica.\ntibble: Proporciona una versión moderna y mejorada de los data frames de R.\ntidyr: Organiza y limpia datos, facilitando su transformación a formatos “tidy”.\npurrr: Trabaja con funciones y vectores de manera funcional y consistente.\nstringr: Manipula y opera con cadenas de texto de forma sencilla.\nforcats: Facilita el manejo de variables categóricas (factores) en R.\n\nPara poder utilizar las funciones que proveen estas librerías, es necesario ejecutar:\n\nlibrary(tidyverse)\n\nEl llamado a la librería con la función library() debe realizarse siempre.\nEn esta clase, trabajaremos con el set de datos crecimientoPlantas. Debido a la gran cantidad de funciones provistas por las librerías de tidyverse, utilizaremos solo algunas de las más frecuentes.\n\n2.0.1 Importar\n\n\nlibrary(rio)\n\ndatos = file.choose() |&gt; import()\n\nExploración\n\n\ndim(datos)\nstr(datos)\ntable(datos$group)\nhead(datos)\nsummary(datos)\n\n\n\n2.0.2 Añadir/modificar columnas\n\n\nlibrary(tidyverse)\n\ndatos |&gt;\n  mutate(id = row_number()) # Añade la columna 'id' con el número de filas\n\ndatos |&gt;\n  mutate(\n    weight = round(weight, 1) # Modifica la columna 'weight'\n  )\n\n\n\n\n\n\n\nTip\n\n\n\nUna de las mayores contribuciones del paquete tidyverse, específicamente la librería {magrittr}, fue la implementación del operador pipe para concatenar funciones, que se escribe %&gt;%. Se extendió tanto su empleo, que a partir de la versión 4.1.0 de R se lo incorporó dentro de los operadores de base en R, con la forma |&gt;.\n\n\n\n\n2.0.3 Renombrar columnas\n\n\ndatos |&gt;\n  rename(\n    peso = weight,\n    grupo = group\n  )\n\n# O bien\n\ndatos |&gt;\n  rename_with(\n    ~ c(\"peso\", \"grupo\")\n  )\n\nPuede ser conveniente crear una nueva tabla con los nuevos nombres de columnas:\n\n\ndatos.2 = datos |&gt;\n  rename(\n    peso = weight,\n    grupo = group\n  )\n\n\n\n2.0.4 Medidas de resumen agrupadas\n\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  summarise(promedio = mean(peso))\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  summarise(\n    promedio = mean(peso),\n    minimo = min(peso),\n    maximo = max(peso)\n  )\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  count()\n\n\n\n2.0.5 Combinación de funciones\n\n\ndatos.2 |&gt;\n  mutate(\n    mayor = ifelse(\n      peso &gt; mean(peso),\n      TRUE,\n      FALSE\n    )\n  ) |&gt;\n  group_by(mayor) |&gt;\n  summarise(promedio = mean(peso))\n\n\n\n2.0.6 Ordenar\n\n\ndatos.2 |&gt;\n  arrange(grupo, peso)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  summarise(media = mean(peso)) |&gt;\n  arrange(media)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  summarise(media = mean(peso)) |&gt;\n  arrange(- media)\n\n\n\n2.0.7 Selección de columnas\n\n\ndatos.2 |&gt;\n  select(peso) # Selección por nombre de columna\n\ndatos.2 |&gt;\n  select(1) # Selección por índice de columna\n\n\n\n2.0.8 Selección de filas/filtros\n\n\ndatos.2 |&gt;\n  filter(grupo == \"ctrl\")\n\ndatos.2 |&gt;\n  filter(grupo != \"ctrl\")\n\ndatos.2 |&gt;\n  filter(peso &gt; 6)\n\ndatos.2 |&gt;\n  filter(peso &gt; mean(peso))\n\ndatos.2 |&gt;\n  slice(1)\n\ndatos.2 |&gt;\n  slice(4:10)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice(1)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_max(peso)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_max(peso, n = 2)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_sample(n = 5)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_tail(n = 5)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_head(n = 5)\n\ndatos.2 |&gt;\n  group_by(grupo) |&gt;\n  slice_tail(n = 5)\n\n\n\n2.0.9 Tablas horizontales y verticales\n\n\ndv = datos.2 |&gt;\n  group_by(grupo) |&gt;\n  summarise(media = mean(peso))\ndv\n\ndh = dv |&gt;\n  pivot_wider(\n    names_from = grupo,\n    values_from = media\n  )\ndh\n\ndv2 = dh |&gt;\n  pivot_longer(\n    cols = 1:3,\n    names_to = \"grupo\",\n    values_to = \"peso\"\n  )\ndv2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manipulación de tablas: tidyverse</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html",
    "href": "03_normas_etica.html",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "",
    "text": "3.1 Protección de Datos Personales\nLa ley 25.326 tiene tiene por objeto la protección integral de los datos personales asentados en archivos, registros, bancos de datos, u otros medios técnicos de tratamiento de datos, sean éstos públicos, o privados destinados a dar informes, para garantizar el derecho al honor y a la intimidad de las personas, así como también el acceso a la información que sobre las mismas se registre, de conformidad a lo establecido en el artículo 43, párrafo tercero de la Constitución Nacional.\nEn Argentina, la Agencia de Acceso a la Información Pública (AAIP), que es un organizmo descentralizado que depende de la Jefatura de Ganites de Ministros de la Nación, es la encargada de velar por el cumplimiento de la Ley de Protección de Datos Personales.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html#protección-de-datos-personales",
    "href": "03_normas_etica.html#protección-de-datos-personales",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "",
    "text": "AAIP\n\n\n\nLa AAIP fue creada por disposición del Artículo 19 de la Ley 27.275, de Derecho de Acceso a la Información Pública. En su sitio web, se puede acceder al Proyecto de Ley de Protección de Datos personales presentado en 2023, que tiene por objeto actualizar la Ley 25.326.\nEn ese año, la AAIP y otros organismos internacionales realizaron una Declaración conjunta en torno a la protección de datos en redes sociales e internet., donde explícitamente se hace referencia al término data scraping.\nEn 2024, nuevamente, la AAIP y otras dieciséis autoridades rectoras en materia de protección de datos personales del mundo emitieron una declaración conjunta que brinda orientaciones para que las empresas dueñas de redes sociales garanticen que la información personal de sus usuarios esté protegida frente a las técnicas automáticas de extracción y procesamiento de datos ilegales, también conocidas como data scrapping.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html#código-civil-y-comercial-de-la-nación.-contratos-de-adhesión.",
    "href": "03_normas_etica.html#código-civil-y-comercial-de-la-nación.-contratos-de-adhesión.",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "3.2 Código Civil y Comercial de la Nación. Contratos de Adhesión.",
    "text": "3.2 Código Civil y Comercial de la Nación. Contratos de Adhesión.\nEl CCCN se encuentra regido a través de la Ley 26.994. La Sección 2da trata sobre los Contratos celebrados por adhesión a cláusulas generales predispuestas.\nEl Artículo 984 establece que El contrato por adhesión es aquel mediante el cual uno de los contratantes adhiere a cláusulas generales predispuestas unilateralmente, por la otra parte o por un tercero, sin que el adherente haya participado en su redacción. Estas y otras disposiciones vinculadas pueden aplicarse a los Términos y Condiciones de Uso de Sitios Web privados.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html#propiedad-intelectual-y-derechos-de-autor",
    "href": "03_normas_etica.html#propiedad-intelectual-y-derechos-de-autor",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "3.3 Propiedad Intelectual y Derechos de Autor",
    "text": "3.3 Propiedad Intelectual y Derechos de Autor\nLa Ley 11.723 (y sus modificaciones) sobre el Régimen Legal de la Propiedad Intelectual, establece que A los efectos de la presente ley, las obras científicas, literarias y artísticas comprenden los escritos de toda naturaleza y extensión, entre ellos los programas de computación fuente y objeto; las compilaciones de datos o de otros materiales; las obras dramáticas, composiciones musicales, dramático-musicales; las cinematográficas, coreográficas y pantomímicas; las obras de dibujo, pintura, escultura, arquitectura; modelos y obras de arte o ciencia aplicadas al comercio o a la industria; los impresos, planos y mapas; los plásticos, fotografías, grabados y fonogramas; en fin, toda producción científica, literaria, artística o didáctica, sea cual fuere el procedimiento de reproducción.\nEl Art. 55 bis establece que La explotación de la propiedad intelectual sobre los programas de computación incluirá entre otras formas los contratos de licencia para su uso o reproducción.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html#delitos-informáticos",
    "href": "03_normas_etica.html#delitos-informáticos",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "3.4 Delitos Informáticos",
    "text": "3.4 Delitos Informáticos\nEl Código Penal de la Nación Argentina (Ley 11.179 y sus modificaciones), establece en su Artículo 153 bis: Será reprimido con prisión de quince (15) días a seis (6) meses, si no resultare un delito más severamente penado, el que a sabiendas accediere por cualquier medio, sin la debida autorización o excediendo la que posea, a un sistema o dato informático de acceso restringido. La pena será de un (1) mes a un (1) año de prisión cuando el acceso fuese en perjuicio de un sistema o dato informático de un organismo público estatal o de un proveedor de servicios públicos o de servicios financieros.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "03_normas_etica.html#archivos-robots.txt",
    "href": "03_normas_etica.html#archivos-robots.txt",
    "title": "3  Aspectos normativos y éticos del web scraping",
    "section": "3.5 Archivos robots.txt",
    "text": "3.5 Archivos robots.txt\nLos archivos robots.txt sirven principalmente para gestionar el tráfico de los rastreadores a un sitio web, aunque también suelen usarse para que los motores de búsqueda no rastreen determinados archivos.\nBásicamente, consiste en aplicar el Protocolo de exclusión de robots.\nPara acceder al archivo robots.txt, se debe añadir “robots.txt” a continuación de la url principal. Por ejemplo:\nhttps://www.indec.gob.ar/robots.txt\nmostrará una leyenda como sigue:\n\nUser-agent: *\nDisallow:\nSitemap: https://www.indec.gob.ar/sitemap.xml\n\nEn el ejemplo anterior:\n\nUser-agent: *: Esta línea indica que las reglas que siguen aplican a todos los rastreadores o bots de motores de búsqueda. El asterisco (*) es un comodín que significa “todos”.\nDisallow:: Esta línea no tiene ninguna ruta especificada después de Disallow:. Esto significa que no hay restricciones para los bots, y pueden rastrear todas las páginas del sitio web.\nSitemap: https://www.indec.gob.ar/sitemap.xml: Aquí se proporciona la ubicación del mapa del sitio (sitemap.xml). Un mapa del sitio es un archivo que lista las URLs de un sitio web, ayudando a los motores de búsqueda a rastrear e indexar el contenido de manera más eficiente.\n\nLas instrucciones allow y disallow habilitan o deshabilitan, respectivamente, las páginas que comiencen o contengan una determinada denominación. Por ejemplo:\n\n# Sitemap\nSitemap: http://jujuy.gob.ar/sitemap.xml\n\n# Files and Directories to notindexing of our WordPress\n\nUser-Agent: *\nCrawl-delay: 30\nDisallow: /wp-content/uploads/\nAllow: /feed/$\nDisallow: /wp-\nDisallow: /wp-content/\nDisallow: /trackback/\nDisallow: /wp-admin/\nDisallow: /?s=\nDisallow: /search\nDisallow: /index.php\nDisallow: /*?\nDisallow: /*.php$\nDisallow: /*.js$\nDisallow: /*.inc$\nDisallow: /*.css$\nDisallow: */trackback/\nDisallow: /wp-includes/\n# Rules for most known bots\n\nUser-agent: Googlebot\n\nUser-agent: Googlebot-Image\nDisallow: /wp-includes/\nDisallow: /wp-content/uploads/\n\nUser-agent: Mediapartners-Google*\nDisallow:\n\nUser-agent: ia_archiver\nDisallow: /\n\nUser-agent: duggmirror\nDisallow: /\n\nUser-agent: noxtrumbot\nCrawl-delay: 50\n\nUser-agent: msnbot\nCrawl-delay: 30\n\nUser-agent: Slurp\nCrawl-delay: 10\n\nUser-agent: MSIECrawler\nDisallow: /\n\nUser-agent: WebCopier\nDisallow: /\n\nUser-agent: HTTrack\nDisallow: /\n\nUser-agent: Microsoft.URL.Control\nDisallow: /\n\nUser-agent: libwww\nDisallow: / \n\nUser-agent: UptimeRobot\nDisallow: /\n\nUser-agent: bingbot\nDisallow: /",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Aspectos normativos y éticos del web scraping</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html",
    "href": "04_web_scrap_pag_est.html",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "",
    "text": "4.1 Archivos HTML (HyperText Markup Language)\nUna página web es un archivo de texto plano que utiliza la extensión “.html” (Riva Quiroga, 2022).\nAl contenido de ese archivo se le agregan ciertas etiquetas para indicar a qué corresponde cada uno de sus elementos, lo que permite darle la estructura necesaria para que se visualice correctamente en un navegador.\nEjemplo:\nHTML tiene una estructura jerárquica formada por elementos que consisten en una etiqueta de inicio (por ejemplo ), opcional atributos (id=‘primero’), una etiqueta final (como ), y contenido (todo entre la etiqueta de inicio y final).\nLas partes principales del elemento son:\nHay más de 100 elementos HTML. Algunos de los más importantes son:\nLos hijos (children) son los elementos contenidos dentro de otros elementos. El elemento &lt;p&gt; de arriba tiene un hijo, el elemento &lt;b&gt;. El elemento &lt;b&gt; no tiene hijos, pero sí tiene contenido (el texto “nombre”).\nLos elementos pueden tener atributos:\nLos atributos contienen información adicional sobre el elemento que no aparecerá en el contenido. En este ejemplo, el atributo class es un atributo de identificación de referencia a determinadas propiedades.\nEjemplo:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#archivos-html-hypertext-markup-language",
    "href": "04_web_scrap_pag_est.html#archivos-html-hypertext-markup-language",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "",
    "text": "&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Título&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1 id='primero'&gt;Título&lt;/h1&gt;\n  &lt;p&gt;Texto.; &lt;b&gt;Texto en negrita.&lt;/b&gt;&lt;/p&gt;\n  &lt;/body&gt;\n  \n&lt;/html&gt;\n \n\n\n\n\n\n\n\nFuente: https://developer.mozilla.org/es/docs/Web/HTML\n\n\n\n\n\n\n\nLa etiqueta de apertura: consiste en el nombre del elemento (en este caso, p), encerrado por paréntesis angulares (&lt; &gt;) de apertura y cierre. Establece dónde comienza o empieza a tener efecto el elemento —en este caso, dónde es el comienzo del párrafo—.\nLa etiqueta de cierre: es igual que la etiqueta de apertura, excepto que incluye una barra de cierre (/) antes del nombre de la etiqueta. Establece dónde termina el elemento —en este caso dónde termina el párrafo—.\nEl contenido: este es el contenido del elemento, que en este caso es sólo texto.\nEl elemento: la etiqueta de apertura, más la etiqueta de cierre, más el contenido equivale al elemento.\n\n\n\nCada página HTML debe estar en un elemento &lt;html&gt;, y debe tener dos hijos: &lt;head&gt;, que contiene metadatos de documentos como el título de la página, y &lt;body&gt;, que contiene el contenido que ve en el navegador.\n\n&lt;p&gt;\n  Hola! Mi &lt;b&gt;nombre&lt;/b&gt; es Juan.\n&lt;/p&gt;\n\n\nEtiquetas de bloques como &lt;h1&gt;, &lt;section&gt; (sección), &lt;p&gt; (párrafo), y &lt;ol&gt; (lista ordenada) forman la estructura general de la página.\nEtiquetas en línea como &lt;b&gt; (negrita), &lt;i&gt; (itálica), y &lt;a&gt; (enlace) dan formato al texto dentro de las etiquetas de bloque.\n\n\n&lt;p class = \"clase_1\"&gt; Párrafo.&lt;/p&gt;\n\n\n\n&lt;html&gt;\n\n&lt;head&gt;\n&lt;style&gt;\nh1.estilo1 {\n    color: blue;\n}\np.estilo2 {\n    color: red\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;h1 class = \"estilo1\"&gt;Encabezado&lt;/h1&gt;\n&lt;p class = \"estilo2\"&gt;Primer párrafo.&lt;/p&gt;\n&lt;p&gt;Segundo párrafo.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\nAtributo\nDescripción\nEtiquetas\n\n\n\n\nid\nIdentificador único para un elemento\nTodas\n\n\nclass\nEspecifica una o más clases CSS para un elemento\nTodas\n\n\nsrc\nEspecifica la URL de un recurso externo, como imágenes o scripts\n&lt;img&gt;, &lt;script&gt;, &lt;iframe&gt;, &lt;audio&gt;, &lt;video&gt;\n\n\nhref\nDefine la URL de un enlace\n&lt;a&gt;, &lt;link&gt;\n\n\nalt\nTexto alternativo para imágenes\n&lt;img&gt;, &lt;area&gt;\n\n\ntitle\nTexto emergente cuando el usuario pasa el cursor sobre un elemento\nTodas\n\n\nstyle\nDefine estilos CSS en línea\nTodas\n\n\ndisabled\nDeshabilita un elemento de entrada\n&lt;button&gt;, &lt;input&gt;, &lt;select&gt;, &lt;textarea&gt;\n\n\nplaceholder\nTexto de sugerencia en campos de entrada\n&lt;input&gt;, &lt;textarea&gt;\n\n\nreadonly\nHace que un campo de entrada sea de solo lectura\n&lt;input&gt;, &lt;textarea&gt;\n\n\nrequired\nIndica que un campo de entrada es obligatorio\n&lt;input&gt;, &lt;select&gt;, &lt;textarea&gt;\n\n\ntype\nDefine el tipo de entrada\n&lt;input&gt;\n\n\nvalue\nEspecifica el valor de un elemento de entrada\n&lt;input&gt;, &lt;option&gt;, &lt;button&gt;\n\n\nname\nNombre del elemento para envío en formularios\n&lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;, &lt;form&gt;\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUn recurso de consulta recomendado es MDN Web Doc",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#extracción-de-datos",
    "href": "04_web_scrap_pag_est.html#extracción-de-datos",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.2 Extracción de datos",
    "text": "4.2 Extracción de datos\nEste apartado es una adaptación de la Unidad 24 del libro R for Data Science.\nEn R, el acceso a la información provista desde páginas estáticas puede realizarse utilizando funciones de la librería {rvest}, que puede ser instalada desde el CRAN:\n\n# Instalación de {rvest} (debe realizarse sólo una vez)\n\ninstall.packages(\"rvest\")\n\nLuego, toda vez que deseemos utilizar la librería {rvest}, deberemos invocarla por medio de la función library():\n\nlibrary(\"rvest\")\n\n\nhtml_cn_22 = read_html(\"https://censo.gob.ar/index.php/datos_definitivos/\")\nhtml_cn_22\n\n{html_document}\n&lt;html class=\"html\" lang=\"es-AR\"&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body class=\"page-template-default page page-id-37582 wp-custom-logo wp-e ...\n\n\n\n\n\n\n\n\nNota\n\n\n\n{rvest} incluye la función minimal_html() que permite escribir html, que utilizaremos para ilustrar el modo de funcionamiento con ejemplo simples.\n\n\nPor Ejemplo:\n\nhtml = minimal_html(\n  \"\n  &lt;p&gt;Esto es un párrafo&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Esto es una lista&lt;/li&gt;\n  &lt;/ul&gt;\n  \"\n)\nhtml\n\n{html_document}\n&lt;html&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n&lt;p&gt;Esto es un párrafo&lt;/p&gt;\\n  &lt;ul&gt;\\n&lt;li&gt;Esto es una lista&lt;/li&gt;\\n   ...",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#encontrar-elementos",
    "href": "04_web_scrap_pag_est.html#encontrar-elementos",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.3 Encontrar elementos",
    "text": "4.3 Encontrar elementos\nCSS (cascading style sheets) define patrones para localizar elementos html, útiles para “rascar” datos web. Por ejemplo:\n\np selecciona todos los elementos p.\n.title selecciona todos los elementos con la clase “title”.\n#title selecciona el elemento con el atributo id igual a “title”.\n\nPor ejemplo:\n\nhtml = minimal_html(\n  \"\n  &lt;h&gt;Esto es un encabezado&lt;/h&gt;\n  &lt;p id='primero'&gt;Esto es un párrafo&lt;/p&gt;\n  &lt;p class='importante'&gt;Esto es un párrafo importante&lt;/p&gt;\n  \"\n)\nhtml\n\n{html_document}\n&lt;html&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n&lt;p id=\"primero\"&gt;Esto es un párrafo&lt;/p&gt;\\n  &lt;p class=\"importante\"&gt;E ...\n\n\nLa función html_elements() permite encontrar todos los elementos que coinciden con el selector:\n\nhtml |&gt; html_elements(\"p\")\n\n{xml_nodeset (2)}\n[1] &lt;p id=\"primero\"&gt;Esto es un párrafo&lt;/p&gt;\n[2] &lt;p class=\"importante\"&gt;Esto es un párrafo importante&lt;/p&gt;\n\nhtml |&gt; html_elements(\".importante\")\n\n{xml_nodeset (1)}\n[1] &lt;p class=\"importante\"&gt;Esto es un párrafo importante&lt;/p&gt;\n\nhtml |&gt; html_elements(\"#primero\")\n\n{xml_nodeset (1)}\n[1] &lt;p id=\"primero\"&gt;Esto es un párrafo&lt;/p&gt;\n\n\nhtml_element() devuelve el mismo número de salidas que las entradas. Si se aplica a un documento completo, devolverá la primera coincidencia:\n\nhtml |&gt; html_element(\"p\")\n\n{html_node}\n&lt;p id=\"primero\"&gt;\n\n\n\n\n\n\n\n\nNota\n\n\n\nCuando se utiliza un selector que no coincie con ningún elemento, html_elements() devuelve un vector de longitud 0, y html_element() devuelve un valor omitido (NA).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#selecciones-anidadas",
    "href": "04_web_scrap_pag_est.html#selecciones-anidadas",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.4 Selecciones anidadas",
    "text": "4.4 Selecciones anidadas\nEs posible combinar las funciones html_element() y html_elements(). Por ejemplo:\n\nhtml = minimal_html(\n  \"\n  &lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Opción 1&lt;/b&gt; es un ejemplo de &lt;i&gt;item&lt;/i&gt; con una &lt;span class='tipo'&gt;característica 1&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Opción 2&lt;/b&gt; es otro ejemplo de  &lt;i&gt;item&lt;/i&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Opción 3&lt;/b&gt; es otro &lt;i&gt;item&lt;/i&gt; con la característica &lt;span class=tipo'&gt;característica 3&lt;/span&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \"\n)\n\n\nSelección de items:\n\n\nopciones = html |&gt; html_elements(\"li\")\nopciones\n\n{xml_nodeset (3)}\n[1] &lt;li&gt;\\n&lt;b&gt;Opción 1&lt;/b&gt; es un ejemplo de &lt;i&gt;item&lt;/i&gt; con una &lt;span class=\"t ...\n[2] &lt;li&gt;\\n&lt;b&gt;Opción 2&lt;/b&gt; es otro ejemplo de  &lt;i&gt;item&lt;/i&gt;\\n&lt;/li&gt;\n[3] &lt;li&gt;\\n&lt;b&gt;Opción 3&lt;/b&gt; es otro &lt;i&gt;item&lt;/i&gt; con la característica &lt;span cla ...\n\n\nNotar lo siguiente:\n\nopciones |&gt; html_element(\"b\")\n\n{xml_nodeset (3)}\n[1] &lt;b&gt;Opción 1&lt;/b&gt;\n[2] &lt;b&gt;Opción 2&lt;/b&gt;\n[3] &lt;b&gt;Opción 3&lt;/b&gt;\n\nopciones |&gt; html_element(\".tipo\")\n\n{xml_nodeset (3)}\n[1] &lt;span class=\"tipo\"&gt;característica 1&lt;/span&gt;\n[2] &lt;NA&gt;\n[3] &lt;NA&gt;\n\nopciones |&gt; html_elements(\".tipo\")\n\n{xml_nodeset (1)}\n[1] &lt;span class=\"tipo\"&gt;característica 1&lt;/span&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#texto-y-atributos",
    "href": "04_web_scrap_pag_est.html#texto-y-atributos",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.5 Texto y atributos",
    "text": "4.5 Texto y atributos\nLa función html_text2() extrae el contenido en texto plano de un elemento html:\n\nopciones |&gt;\n  html_element(\"b\") |&gt;\n  html_text2()\n\n[1] \"Opción 1\" \"Opción 2\" \"Opción 3\"\n\nopciones |&gt;\n  html_element(\".tipo\") |&gt;\n  html_text2()\n\n[1] \"característica 1\" NA                 NA                \n\n\nLa función html_attr() extrae datos desde los atributos:\n\nhtml = minimal_html(\"\n  &lt;p&gt;&lt;a href='https://es.wikipedia.org/wiki/INDEC'&gt;cats&lt;/a&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;a href='https://es.wikipedia.org/wiki/Agencia_de_Acceso_a_la_Información_Pública_(Argentina)'&gt;dogs&lt;/a&gt;&lt;/p&gt;\n\")\n\nhtml |&gt; \n  html_elements(\"p\") |&gt; \n  html_element(\"a\") |&gt; \n  html_attr(\"href\")\n\n[1] \"https://es.wikipedia.org/wiki/INDEC\"                                                 \n[2] \"https://es.wikipedia.org/wiki/Agencia_de_Acceso_a_la_Información_Pública_(Argentina)\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#tablas",
    "href": "04_web_scrap_pag_est.html#tablas",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.6 Tablas",
    "text": "4.6 Tablas\nSi los datos están almacenados como una tabla html, la importación puede realizarse sin inconvenientes. Las tablas html se construyen con cuatro elementos: &lt;table&gt;, &lt;tr&gt; (table row), &lt;th&gt; (table heading) y &lt;td&gt; (table data). Por ejemplo:\n\nhtml = minimal_html(\"\n  &lt;table class='miTabla'&gt;\n    &lt;tr&gt;&lt;th&gt;x&lt;/th&gt;   &lt;th&gt;y&lt;/th&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;1.5&lt;/td&gt; &lt;td&gt;2.7&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;4.9&lt;/td&gt; &lt;td&gt;1.3&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;7.2&lt;/td&gt; &lt;td&gt;8.1&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n  \")\n\nLuego, para extraer la tabla:\n\nhtml |&gt; \n  html_element(\".miTabla\") |&gt; \n  html_table()\n\n# A tibble: 3 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1   1.5   2.7\n2   4.9   1.3\n3   7.2   8.1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#elección-del-selector-adecuado",
    "href": "04_web_scrap_pag_est.html#elección-del-selector-adecuado",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.7 Elección del selector adecuado",
    "text": "4.7 Elección del selector adecuado\nUsualmente la elección del selector adecuado es la parte más complicada del proceso. Un selector adecuado debe ser específico y sensible.\nExisten dos herramientas que pueden facilitar la elección del selector adecuado:\n\nSelectorGadget: es una extensión javascript que genera selectores CCS.\nHerramientas del motor de búsqueda: seleccionar un objeto y, luego de hacer click derecho, seleccionar inspeccionar. Se desplegará una ventana con la estructura html de la página, centrada en el objeto seleccionado.\n\n\n\n\n\nPor ejemplo:\n\nhtml = read_html(\"https://censo.gob.ar/index.php/datos_definitivos_jujuy/\")\n\n# Exploración de \"hijos\" (children)\n\nhtml |&gt; html_children()\n\nhtml |&gt; html_element(\"body\") |&gt; html_children()\n\n# Exploración de todos los enlaces\n\nenlace = html |&gt;\n  html_elements(\"a\") |&gt;\n  html_attr(\"href\")\n\n# Exploración de los enlaces de archivos en excel\n\nenlace[grepl(pattern = \".xlsx\",\n             enlace, \n             ignore.case = TRUE)]\n\n# Exploración de un nodo con un enlace específico (copiado el selector)\nhtml |&gt;\n  html_element(\"#elementor-tab-content-1341 &gt; p:nth-child(2) &gt; span:nth-child(1) &gt; a\")\n\n\n# Enlace a un archivo\n\nenlace = html |&gt;\n  html_element(\"#elementor-tab-content-1341 &gt; p:nth-child(2) &gt; span:nth-child(1) &gt; a\") |&gt;\n  html_attr(\"href\")\n\nenlace\n  \n\n# Descarga de un archivo\n\narchivo_temp = tempfile(fileext = \".xlsx\")\narchivo_temp\n\ndownload.file(enlace, destfile = archivo_temp, mode = \"wb\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "04_web_scrap_pag_est.html#librería-polite",
    "href": "04_web_scrap_pag_est.html#librería-polite",
    "title": "4  Bases para el “raspado web” (web scraping) en páginas estáticas.",
    "section": "4.8 Librería polite",
    "text": "4.8 Librería polite\nLa librería {polite} tiene como objetivo promover un “raspado” web responsable. Las dos funciones principales del paquete, bow y scrape, definen y llevan a cabo una sesión de recolección de datos web. bow se utiliza para presentar al cliente al host y solicitar permiso para extraer datos (mediante una consulta en el archivo robots.txt del host), mientras que scrape es la función principal para recuperar datos del servidor remoto. Una vez que se establece la conexión, no es necesario volver a usar bow . En cambio, para ajustar una URL de extracción de datos, el usuario puede simplemente indicar la nueva ruta, que actualiza la URL de la sesión, asegurándose de que la nueva ubicación se pueda negociar en robots.txt.\nSe puede instalar polite desde el CRAN (una sola vez):\n\ninstall.packages(\"polite\")\n\nLuego\n\nlibrary(polite)\nsesion = bow(\"https://www.indec.gob.ar/\", force=TRUE)\n\nprint(sesion)\n\n# Título\n\ntitulo = scrape(sesion) %&gt;%\n  html_node(\"title\") %&gt;%\n  html_text()\n\nprint(titulo)\n\n# Enlaces\n\nenlaces = scrape(sesion) %&gt;%\n  html_nodes(\"a\") %&gt;%\n  html_attrs_dfr(\"href\")\n\nprint(enlaces)\n\nenlaces = scrape(sesion) %&gt;%\n  html_nodes(\"a\") %&gt;%\n  html_attrs_dfr(\"href\") |&gt;\n  dplyr::filter(!is.na(href))\n\nprint(enlaces)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bases para el \"raspado web\" (*web scraping*) en páginas estáticas.</span>"
    ]
  },
  {
    "objectID": "05_funciones.html",
    "href": "05_funciones.html",
    "title": "5  Funciones",
    "section": "",
    "text": "5.1 Estructura general de una función\nnombre_funcion = function(argumento1, argumento2, ...) {\n  # Cuerpo de la función\n  # Operaciones con los argumentos\n  return(resultado)  # Devuelve un valor (opcional)\n}\nComponentes de una función:\nVentajas de utilizar funciones (Wickham, 2024)\nEjemplo de una función básica\nmultiplicar = function(a, b = 2) {\n  return(a * b)\n}\nmultiplicar(5)  # Usa b = 2 por defecto\n\nmultiplicar(5, 3)\nFunciones anónimas\nSon funciones sin nombre que se definen y usan directamente.\n(function(x) x^2)(3)  # ¿Qué valor devuelve?\nFunciones como objetos\nLas funciones pueden asignarse a variables, pasarse como argumentos a otras funciones o devolverse como resultados.\noperacion = multiplicar\noperacion(2, 3)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#componentes-de-una-función",
    "href": "05_funciones.html#componentes-de-una-función",
    "title": "5  Funciones",
    "section": "",
    "text": "Nombre de la función: Identificador que se usa para llamar a la función.\nArgumentos: Valores de entrada que la función necesita para operar. Pueden ser opcionales o tener valores por defecto.\nCuerpo de la función: Contiene las operaciones que se ejecutan cuando se llama a la función.\nValor de retorno: El resultado que devuelve la función (usualmente usando la función return()). Si no se especifica, la función devuelve el valor de la última expresión evaluada.\n\n\n\nSe puede dar a la función un nombre evocador que hará el código más fácil de entender.\nA medida que cambien los requerimientos, solo se necesitará cambiar el código en un solo lugar, en vez de en varios lugares.\nSe eliminan las probabilidades de errores accidentales al copiar y pegar (por ej., al actualizar el nombre de una variable en un lugar, pero no en otro).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#ejemplo-de-una-función-básica",
    "href": "05_funciones.html#ejemplo-de-una-función-básica",
    "title": "5  Funciones",
    "section": "5.2 Ejemplo de una función básica",
    "text": "5.2 Ejemplo de una función básica\n\nmultiplicar = function(a, b = 2) {\n  return(a * b)\n}\nmultiplicar(5)  # Usa b = 2 por defecto\n\nmultiplicar(5, 3)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#funciones-anónimas",
    "href": "05_funciones.html#funciones-anónimas",
    "title": "5  Funciones",
    "section": "5.3 Funciones anónimas",
    "text": "5.3 Funciones anónimas\nSon funciones sin nombre que se definen y usan directamente.\n\n(function(x) x^2)(3)  # ¿Qué valor devuelve?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#funciones-como-objetos",
    "href": "05_funciones.html#funciones-como-objetos",
    "title": "5  Funciones",
    "section": "5.4 Funciones como objetos",
    "text": "5.4 Funciones como objetos\nLas funciones pueden asignarse a variables, pasarse como argumentos a otras funciones o devolverse como resultados.\n\noperacion = multiplicar\noperacion(2, 3)  \n\n\n\n\n\n\n\nNota\n\n\n\nLas variables definidas dentro de una función son locales y no afectan el entorno global.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Referencias",
    "section": "",
    "text": "R para la Ciencias de Datos.\nIntroducción a Web Scraping usando R\nMDN\nSitio oficial de rvest",
    "crumbs": [
      "Referencias"
    ]
  },
  {
    "objectID": "05_funciones.html#estructura-general-de-una-función",
    "href": "05_funciones.html#estructura-general-de-una-función",
    "title": "5  Funciones",
    "section": "",
    "text": "Nombre de la función: Identificador que se usa para llamar a la función.\nArgumentos: Valores de entrada que la función necesita para operar. Pueden ser opcionales o tener valores por defecto.\nCuerpo de la función: Contiene las operaciones que se ejecutan cuando se llama a la función.\nValor de retorno: El resultado que devuelve la función (usualmente usando la función return()). Si no se especifica, la función devuelve el valor de la última expresión evaluada.\n\n\n\nSe puede dar a la función un nombre evocador que hará el código más fácil de entender.\nA medida que cambien los requerimientos, solo se necesitará cambiar el código en un solo lugar, en vez de en varios lugares.\nSe eliminan las probabilidades de errores accidentales al copiar y pegar (por ej., al actualizar el nombre de una variable en un lugar, pero no en otro).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nLas variables definidas dentro de una función son locales y no afectan el entorno global.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#estructuras-de-control",
    "href": "05_funciones.html#estructuras-de-control",
    "title": "5  Funciones",
    "section": "5.2 Estructuras de control",
    "text": "5.2 Estructuras de control\n\n5.2.1 Estructuras de control en R: if y for\nEn R, las estructuras de control permiten manejar el flujo de ejecución del código. Dos de las más comunes son las estructuras condicionales (if) y los bucles (for). A continuación, se describe su uso y se proporcionan ejemplos básicos.\n\n5.2.1.1 Estructura condicional if\nLa estructura if se utiliza para ejecutar un bloque de código si se cumple alguna condición específica. Su sintaxis básica es:\n\nif (condición) {\n  # Bloque de código que se ejecuta si la condición es verdadera\n}\n\nSi la condición es verdadera (TRUE), se ejecuta el bloque de código dentro del if. En caso contrario, no se ejecuta.\nEjemplo:\n\nx = 10\n\nif (x &gt; 5) {\n  print(\"x es mayor que 5\")\n}\n\nTambién es posible agregar una cláusula else para manejar el caso en que la condición no se cumpla:\n\nif (x &gt; 15) {\n  print(\"x es mayor que 15\")\n} else {\n  print(\"x no es mayor que 15\")\n}\n\n\n\n5.2.1.2 Bucles for\nEl bucle for se utiliza para repetir un bloque de código un número específico de veces, iterando sobre una secuencia de valores. Su sintaxis básica es:\n\nfor (variable in secuencia) {\n  # Bloque de código que se ejecuta en cada iteración\n}\n\nEn cada iteración, la variable toma un valor de la secuencia, y el bloque de código se ejecuta con ese valor.\nEjemplo:\n\nfor (i in 1:5) {\n  print(paste(\"Iteración:\", i))\n}\n\nTambién es posible iterar sobre vectores o listas:\n\nfrutas = c(\"manzana\", \"banana\", \"naranja\")\n\nfor (fruta in frutas) {\n  print(fruta)\n}\n\n\n\n5.2.1.3 Combinación de if y for\nLas estructuras if y for pueden combinarse para crear lógicas más complejas. Por ejemplo, se puede usar un if dentro de un bucle for para realizar acciones condicionales en cada iteración.\nEjemplo:\n\nnumeros = c(1, 3, 5, 7, 10)\n\nfor (num in numeros) {\n  if (num %% 2 == 0) {\n    print(paste(num, \"es par\"))\n  } else {\n    print(paste(num, \"es impar\"))\n  }\n}\n\n[1] \"1 es impar\"\n[1] \"3 es impar\"\n[1] \"5 es impar\"\n[1] \"7 es impar\"\n[1] \"10 es par\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "05_funciones.html#actividad-integradora",
    "href": "05_funciones.html#actividad-integradora",
    "title": "5  Funciones",
    "section": "5.3 Actividad integradora",
    "text": "5.3 Actividad integradora\nEn clase se realizará una actividad de integración de contenidos.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Funciones</span>"
    ]
  },
  {
    "objectID": "R.html",
    "href": "R.html",
    "title": "R en la web",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "R en la web"
    ]
  }
]